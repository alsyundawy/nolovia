<?php

/*
 * Copyright 2015, 2021 Shaun Cummiskey, <shaun@shaunc.com> <https://shaunc.com>
 * Repository: <https://github.com/parseword/nolovia>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * This script fetches and makes use of server lists compiled by:
 *
 * AdguardTeam at https://github.com/adguardteam/cname-trackers
 * Paul Butler at https://github.com/paulgb/BarbBlock
 * Disconnect at https://disconnect.me/
 * EasyList at https://github.com/easylist/easylist
 * Peter Lowe at http://pgl.yoyo.org/adservers/
 * Dan Pollock at http://someonewhocares.org/hosts/
 * Malicious Hosts Blocklist at https://gitlab.com/curben/urlhaus-filter
 * smed79 at https://github.com/smed79/blacklist/
 * Spammer Slapper at http://spammerslapper.com/
 * Vetyt Yhonay at https://github.com/Yhonay/antipopads/
 * Willem de Groot at https://github.com/gwillem/magento-malware-scanner
 * ZeroDot1 at https://zerodot1.gitlab.io/CoinBlockerListsWeb/
 */

require_once('./model/ResolverConfiguration.php');
require_once('./model/ServerList.php');

//Enabling debug mode makes the script more chatty
define('DEBUG', true);
$DEBUG = !DEBUG ? null : array(
    'domainCount' => array(),
    //Enable this to print a list of all domains, with a count of blocked hosts
    //in each. Useful for finding domains you may want to block entirely.
    'printDomainCount' => false,
);

//Only retrieve external host lists if the local copy is older than this interval
define('FETCH_INTERVAL', time()-43200);

//Passing "force" on the command line will override the FETCH_INTERVAL setting
define('FORCE_FETCH', isset($argv) && in_array('force', $argv));

//How many times should we try to fetch a list before giving up due to failure?
define('FETCH_ATTEMPTS', 3);

//Should failure to fetch one of the server lists be considered a fatal error?
define('FETCH_FAILURE_FATALITY_FLAG', true);

//Recognize some TLDs with more than one part, e.g. com.au
define('REGEX_MULTIPART_TLD',
    '/\.(com?|org?|inc)\.(ar|au|bo|br|cc|cn|co|id|il|in|hk|jp|kr|kz|mx|nz|ph|pt|rs|tr|ua|uk|uy|vn|za)$/');

//Should we send a non-blank User-Agent when fetching web resources?
ini_set("user_agent", "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:68.0) Gecko/20100101 Firefox/68.0");

//Set up the resolvers we're going to generate config files for
$resolvers = array();

//BIND style zone file (enabled by default)
$r = new ResolverConfiguration('bind');
$r->setEnabled(true);
$r->setFilePath('./blackhole.conf');
$r->setZoneDefinitionTemplate('zone "%HOST%" IN { type master; notify no; '
    . 'file "blackhole.zone"; allow-query { recursers; }; };');
$resolvers[] = $r;

//BIND style RPZ file (enabled by default)
$r = new ResolverConfiguration('rpz');
$r->setEnabled(true);
$r->setFilePath('./blackhole.rpz');
$r->setZoneDefinitionTemplate("%HOST% IN CNAME .\n*.%HOST% IN CNAME .");
$resolvers[] = $r;

//nsd (disabled by default)
$r = new ResolverConfiguration('nsd');
$r->setEnabled(false);
$r->setFilePath('./blackhole-nsd.conf');
$r->setZoneDefinitionTemplate('zone: name: "%HOST%" zonefile: "blackhole.zone"');
$resolvers[] = $r;

//Plaintext host list output (disabled by default)
$r = new ResolverConfiguration('hostlist');
$r->setEnabled(false);
$r->setFilePath('./blackhole-hostlist.txt');
$r->setZoneDefinitionTemplate('%HOST%');
$resolvers[] = $r;

unset($r);

//Set up the server lists we're going to fetch. To disable a particular list,
//comment out the block that defines it.
$serverLists = array();

$sl = new ServerList('nolovia Windows Telemetry');
$sl->setFilePath('./data/hosts-windows-telemetry.txt');
$sl->setUri('https://raw.githubusercontent.com/parseword/nolovia/master/skel/hosts-windows-telemetry.txt');
$serverLists[] = $sl;

$sl = new ServerList('nolovia State-sponsored Malware');
$sl->setFilePath('./data/hosts-government-malware.txt');
$sl->setUri('https://raw.githubusercontent.com/parseword/nolovia/master/skel/hosts-government-malware.txt');
$serverLists[] = $sl;

$sl = new ServerList('nolovia Acoustic/Silverpop Marketing');
$sl->setFilePath('./data/hosts-silverpop.txt');
$sl->setUri('https://raw.githubusercontent.com/parseword/nolovia/master/skel/hosts-silverpop.txt');
$serverLists[] = $sl;

$sl = new ServerList('nolovia Dynamic DNS Providers');
$sl->setFilePath('./data/hosts-dynamic-dns.txt');
$sl->setUri('https://raw.githubusercontent.com/parseword/nolovia/master/skel/hosts-dynamic-dns.txt');
$serverLists[] = $sl;

$sl = new ServerList('nolovia Supplemental Bad Host Index');
$sl->setFilePath('./data/hosts-nolovia.txt');
$sl->setUri('https://raw.githubusercontent.com/parseword/nolovia/master/skel/hosts-nolovia.txt');
$serverLists[] = $sl;

$sl = new ServerList('AdguardTeam CNAME Tracker List');
$sl->setFilePath('./data/hosts-adguard-cname.txt');
$sl->setUri('https://raw.githubusercontent.com/AdguardTeam/cname-trackers/master/combined_disguised_trackers_justdomains.txt');
$sl->setMinimumExpectedBytes(10240);
$sl->setValidationText('AdGuard CNAME');
$serverLists[] = $sl;

$sl = new ServerList('antipopads List from Yhonay');
$sl->setFilePath('./data/hosts-antipopads.txt');
$sl->setUri('https://raw.githubusercontent.com/Yhonay/antipopads/master/hosts');
$sl->setMinimumExpectedBytes(10240);
$sl->setValidationText('0.0.0.0');
$sl->setReplacePatterns(array('|^0.0.0.0(\s+)|m'));
$serverLists[] = $sl;

$sl = new ServerList('BarbBlocker from paulgb');
$sl->setFilePath('./data/hosts-barbblocker.txt');
$sl->setUri('https://paulgb.github.io/BarbBlock/blacklists/domain-list.txt');
$sl->setMinimumExpectedBytes(1024);
$sl->setValidationText('functionalclam');
$serverLists[] = $sl;

$sl = new ServerList('CoinBlockerList from ZeroDot1');
$sl->setFilePath('./data/hosts-coinblocker.txt');
$sl->setUri('https://gitlab.com/ZeroDot1/CoinBlockerLists/raw/master/list.txt');
$sl->setMinimumExpectedBytes(2048);
$sl->setValidationText('bitcoin');
$serverLists[] = $sl;

$sl = new ServerList('Disconnect Malvertising');
$sl->setFilePath('./data/hosts-disconnect-malvertising.txt');
$sl->setUri('https://s3.amazonaws.com/lists.disconnect.me/simple_malvertising.txt');
$sl->setMinimumExpectedBytes(32768);
$sl->setValidationText('2o7.net');
$serverLists[] = $sl;

$sl = new ServerList('EasyPrivacy Tracking Server List');
$sl->setFilePath('./data/hosts-easyprivacy-tracking.txt');
$sl->setUri('https://raw.githubusercontent.com/easylist/easylist/master/easyprivacy/easyprivacy_trackingservers.txt');
$sl->setMinimumExpectedBytes(10240);
$sl->setValidationText('2o7.net');
$sl->setMatchAllPattern('~\|\|(.*?)\^\$third-party~');
$serverLists[] = $sl;

$sl = new ServerList('GetAdmiral Anti-Adblock List from smed79');
$sl->setFilePath('./data/hosts-admiral-antiadblock.txt');
$sl->setUri('https://raw.githubusercontent.com/smed79/blacklist/master/hosts/admiral.txt');
$sl->setMinimumExpectedBytes(1024);
$sl->setValidationText('Admiral HOSTS list');
$sl->setReplacePatterns(array('|^0.0.0.0(\s+)|m'));
$serverLists[] = $sl;

$sl = new ServerList('hpHosts Legacy Backup');
$sl->setFilePath('./data/hosts-hphosts.txt');
$sl->setUri('https://raw.githubusercontent.com/parseword/nolovia/master/skel/hosts-hphosts-legacy.txt');
$sl->setMinimumExpectedBytes(512000);
$sl->setValidationText('2o7.net');
$sl->setReplacePatterns(array('|^127.0.0.1(\s+)|m', '|\.$|m'));
$serverLists[] = $sl;

$sl = new ServerList('Magento Malware List from gwillem');
$sl->setFilePath('./data/hosts-magento-malware.txt');
$sl->setUri('https://raw.githubusercontent.com/gwillem/magento-malware-scanner/master/rules/burner-domains.txt');
$sl->setMinimumExpectedBytes(1024);
$sl->setValidationText('mage');
$serverLists[] = $sl;

$sl = new ServerList('Malicious Hosts Blocklist');
$sl->setFilePath('./data/hosts-malicious-hosts-blocklist.txt');
$sl->setUri('https://curben.gitlab.io/malware-filter/urlhaus-filter-hosts.txt');
$sl->setMinimumExpectedBytes(10240);
$sl->setValidationText('Malicious Hosts Blocklist');
$sl->setReplacePatterns(array('|^0.0.0.0(\s+)|m'));
$serverLists[] = $sl;

$sl = new ServerList('pgl.yoyo.org');
$sl->setFilePath('./data/hosts-yoyo.txt');
$sl->setUri('http://pgl.yoyo.org/adservers/serverlist.php?hostformat=nohtml&mimetype=plaintext');
$sl->setMinimumExpectedBytes(30720);
$sl->setValidationText('2o7.net');
$serverLists[] = $sl;

$sl = new ServerList('someonewhocares.org');
$sl->setFilePath('./data/hosts-someonewhocares.txt');
$sl->setUri('http://someonewhocares.org/hosts/hosts');
$sl->setListStartDelimiter('ad-sites');
$sl->setListEndDelimiter('/ad-sites');
//$sl->setListStartDelimiter('#<ad-sites>');
//$sl->setListEndDelimiter('#</ad-sites>');
$sl->setValidationText('2o7.net');
$sl->setReplacePatterns(array('|^127.0.0.1(\s+)|m'));
$serverLists[] = $sl;

$sl = new ServerList('Spammer Slapper');
$sl->setFilePath('./data/hosts-spammerslapper.txt');
$sl->setUri('http://spammerslapper.com/downloads/adblock_include.conf');
$sl->setListEndDelimiter('//End Ad Blocking');
$sl->setValidationText('2o7.net');
$sl->setMatchAllPattern('|zone "(.*?)"|');
$serverLists[] = $sl;

unset($sl);
